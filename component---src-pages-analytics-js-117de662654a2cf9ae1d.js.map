{"version":3,"sources":["webpack:///./src/hooks/use-previous.js","webpack:///./src/components/graphs/blocks-mined-graph.js","webpack:///./src/components/graphs/transactions-graph.js","webpack:///./src/components/graphs/difficulty-graph.js","webpack:///./src/components/graphs/hashrate-graph.js","webpack:///./src/components/graphs/mined-coins-graph.js","webpack:///./src/components/graphs/inflation-graph.js","webpack:///./src/components/shared/bottom-tab.js","webpack:///./src/components/pages/analytics/seed-node.js","webpack:///./src/components/pages/analytics/seed-node-list.js","webpack:///./src/components/pages/analytics/seed-node-map.js","webpack:///./src/components/pages/analytics/seed-node-map-section.js","webpack:///./src/pages/analytics.js","webpack:///./node_modules/d3-ease/src/cubic.js","webpack:///./src/components/image.js"],"names":["usePrevious","value","ref","useRef","useEffect","current","BlocksMinedGraph","theme","useState","data","setData","DAY","group","setGroup","loading","setLoading","groupName","GROUP_NAMES","useRenderValues","yValueOptions","suffix","renderXAxis","renderXValue","renderYAxis","renderYValue","renderKeyValue","a","Promise","all","fetch","then","r","json","blocks","algoBlocks","newData","map","v","i","x","y","getData","title","startY","keyNames","algoNames","stackedKeys","Object","keys","stackColors","algoColors","onChangeGroup","React","memo","TransactionsGraph","difficultyData","barPlotKeys","barPlotColors","savedData","DifficultyGraph","algo","scale","shorten","precision","uri","HashrateGraph","space","valueMultiplier","MinedCoinsGraph","InflationGraph","yAxisOptions","TabButton","styled","button","thisKey","selectedKey","BottomTab","items","index","setIndex","pageContainerRef","buttonsContainerRef","buttonsRef","slice","length","width","useDimensions","useSpring","offsetX","config","duration","easing","easings","setOffsetX","useLayoutEffect","buttonOffsetX","offsetLeft","buttonWidth","offsetWidth","newOffsetX","maxOffsetX","previousSlide","dir","transition","useTransition","initial","opacity","transform","from","enter","leave","position","props","style","content","interpolate","keyIndex","label","color","key","el","onClick","backgroundColor","mapLatBottomDegree","Math","PI","SeedNode","node","bind","boxRef","wobbly","set","timeout","setTimeout","random","clearTimeout","useGesture","onHover","hovering","domTarget","sizes","lat","lon","mapLonRight","worldMapWidth","mapWidth","mapOffsetY","log","sin","convertGeoToPixel","left","top","size","parseInt","height","SeedNodeList","nodes","SeedNodeMap","currentNode","setCurrentNode","bindDots","args","onMove","event","pageY","pageX","offsetTop","ip","port","version","city","country","location","viewBox","fill","xmlns","d","filename","alt","paddingBottom","gradientTextStyleBlue","SeedNodeMapSection","t","useTranslation","setNodes","number","AnalyticsPage","showArrow","algoDiffScale","hashrateScale","cubicOut","Image","className","query","render","image","images","edges","find","n","relativePath","includes","imageSizes","childImageSharp","fluid"],"mappings":"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","file":"component---src-pages-analytics-js-117de662654a2cf9ae1d.js","sourcesContent":["import { useRef, useEffect } from \"react\"\n\nexport default function usePrevious(value) {\n  const ref = useRef()\n  useEffect(() => {\n    ref.current = value\n  })\n  return ref.current\n}\n","import React, { useEffect, useState } from \"react\"\nimport tw from \"twin.macro\"\n\nimport LineGraph from \"./line-graph\"\nimport { useRenderValues } from \"./hooks\"\n\nimport { GROUP_NAMES, DAY, algoNames, algoColors } from \"../../common/graph\"\n\nfunction BlocksMinedGraph({ theme }) {\n  const [data, setData] = useState(null)\n  const [group, setGroup] = useState(DAY)\n  const [loading, setLoading] = useState(true)\n  const groupName = GROUP_NAMES[group]\n\n  const {\n    renderXAxis,\n    renderXValue,\n    renderYAxis,\n    renderYValue,\n    renderKeyValue,\n  } = useRenderValues({\n    data,\n    group,\n    yValueOptions: { suffix: \" blocks\" },\n  })\n\n  useEffect(() => {\n    const getData = async () => {\n      setLoading(true)\n      const [blocks, algoBlocks] = await Promise.all([\n        fetch(\n          `https://xmy-history.coinid.org/processeddata/blocks/${groupName}.json`\n        ).then(r => r.json()),\n        fetch(\n          `https://xmy-history.coinid.org/processeddata/algoBlocks/${groupName}.json`\n        ).then(r => r.json()),\n      ])\n\n      const newData = blocks.map((v, i) => {\n        return {\n          x: i,\n          y: v,\n          ...algoBlocks[i],\n        }\n      })\n\n      setData(newData)\n      setLoading(false)\n    }\n\n    getData()\n  }, [groupName])\n\n  return (\n    <LineGraph\n      title=\"\"\n      group={group}\n      loading={loading}\n      data={data}\n      startY={0}\n      renderXAxis={renderXAxis}\n      renderYAxis={renderYAxis}\n      renderXValue={renderXValue}\n      renderYValue={renderYValue}\n      renderKeyValue={renderKeyValue}\n      keyNames={algoNames}\n      stackedKeys={Object.keys(algoNames)}\n      stackColors={algoColors}\n      onChangeGroup={setGroup}\n      theme={theme}\n    />\n  )\n}\n\nexport default React.memo(BlocksMinedGraph)\n","import React, { useEffect, useState } from \"react\"\nimport tw from \"twin.macro\"\n\nimport LineGraph from \"./line-graph\"\nimport { useRenderValues } from \"./hooks\"\n\nimport { GROUP_NAMES, DAY } from \"../../common/graph\"\n\nfunction TransactionsGraph({ theme }) {\n  const [data, setData] = useState(null)\n  const [group, setGroup] = useState(DAY)\n  const [loading, setLoading] = useState(true)\n  const groupName = GROUP_NAMES[group]\n\n  const {\n    renderXAxis,\n    renderXValue,\n    renderYAxis,\n    renderYValue,\n  } = useRenderValues({\n    data,\n    group,\n    yValueOptions: { suffix: \" transactions\" },\n  })\n\n  useEffect(() => {\n    setLoading(true)\n    fetch(\n      `https://xmy-history.coinid.org/processeddata/transactions/${groupName}.json`\n    )\n      .then(r => r.json())\n      .then(difficultyData => {\n        const newData = difficultyData.map((v, i) => {\n          return {\n            x: i,\n            y: v,\n          }\n        })\n        setData(newData)\n        setLoading(false)\n      })\n  }, [groupName])\n\n  return (\n    <LineGraph\n      loading={loading}\n      group={group}\n      data={data}\n      startY={0}\n      renderXAxis={renderXAxis}\n      renderYAxis={renderYAxis}\n      renderXValue={renderXValue}\n      renderYValue={renderYValue}\n      barPlotKeys={[\"y\"]}\n      barPlotColors={[\"#0066FF\"]}\n      onChangeGroup={setGroup}\n      theme={theme}\n    />\n  )\n}\n\nexport default React.memo(TransactionsGraph)\n","import React, { useEffect, useState } from \"react\"\nimport tw from \"twin.macro\"\n\nimport LineGraph from \"./line-graph\"\nimport { useRenderValues } from \"./hooks\"\n\nimport { GROUP_NAMES, DAY, algoColors } from \"../../common/graph\"\n\nconst savedData = {}\n\nfunction DifficultyGraph({ algo = 0, scale = 1, theme }) {\n  const [data, setData] = useState(null)\n  const [group, setGroup] = useState(DAY)\n  const [loading, setLoading] = useState(true)\n  const groupName = GROUP_NAMES[group]\n\n  const {\n    renderXAxis,\n    renderXValue,\n    renderYAxis,\n    renderYValue,\n  } = useRenderValues({\n    data,\n    group,\n    scale: scale,\n    yValueOptions: { shorten: { precision: 2 } },\n  })\n\n  useEffect(() => {\n    setLoading(true)\n    const uri = `https://xmy-history.coinid.org/processeddata/difficulty/${groupName}.json`\n\n    if (savedData[uri]) {\n      const newData = savedData[uri].map((v, i) => {\n        return {\n          x: i,\n          y: v[algo] / scale,\n        }\n      })\n      setData(newData)\n      setLoading(false)\n    } else {\n      fetch(uri)\n        .then(r => r.json())\n        .then(difficultyData => {\n          savedData[uri] = difficultyData\n          const newData = difficultyData.map((v, i) => {\n            return {\n              x: i,\n              y: v[algo] / scale,\n            }\n          })\n          setData(newData)\n          setLoading(false)\n        })\n    }\n  }, [algo, groupName, scale])\n\n  return (\n    <LineGraph\n      loading={loading}\n      group={group}\n      data={data}\n      startY={0}\n      renderXAxis={renderXAxis}\n      renderYAxis={renderYAxis}\n      renderXValue={renderXValue}\n      renderYValue={renderYValue}\n      barPlotKeys={[\"y\"]}\n      barPlotColors={[algoColors[algo]]}\n      onChangeGroup={setGroup}\n      theme={theme}\n    />\n  )\n}\n\nexport default React.memo(DifficultyGraph)\n","import React, { useEffect, useState } from \"react\"\nimport tw from \"twin.macro\"\n\nimport LineGraph from \"./line-graph\"\nimport { useRenderValues } from \"./hooks\"\n\nimport { GROUP_NAMES, DAY, algoColors } from \"../../common/graph\"\n\nconst savedData = {}\n\nfunction HashrateGraph({ algo = 0, scale = 1, theme }) {\n  const [data, setData] = useState(null)\n  const [group, setGroup] = useState(DAY)\n  const [loading, setLoading] = useState(true)\n  const groupName = GROUP_NAMES[group]\n\n  const {\n    renderXAxis,\n    renderXValue,\n    renderYAxis,\n    renderYValue,\n  } = useRenderValues({\n    data,\n    group,\n    scale: scale,\n    yValueOptions: {\n      shorten: { precision: 3, space: true },\n      suffix: \"H/s\",\n    },\n    valueMultiplier: 4295032833,\n  })\n\n  useEffect(() => {\n    setLoading(true)\n    const uri = `https://xmy-history.coinid.org/processeddata/workSeconds/${groupName}.json`\n\n    if (savedData[uri]) {\n      const newData = savedData[uri].map((v, i) => {\n        return {\n          x: i,\n          y: v[algo] / scale,\n        }\n      })\n      setData(newData)\n      setLoading(false)\n    } else {\n      fetch(uri)\n        .then(r => r.json())\n        .then(difficultyData => {\n          savedData[uri] = difficultyData\n\n          const newData = difficultyData.map((v, i) => {\n            return {\n              x: i,\n              y: v[algo] / scale,\n            }\n          })\n\n          setData(newData)\n          setLoading(false)\n        })\n    }\n  }, [algo, groupName, scale])\n\n  return (\n    <LineGraph\n      loading={loading}\n      group={group}\n      data={data}\n      startY={0}\n      renderXAxis={renderXAxis}\n      renderYAxis={renderYAxis}\n      renderXValue={renderXValue}\n      renderYValue={renderYValue}\n      barPlotKeys={[\"y\"]}\n      barPlotColors={[algoColors[algo]]}\n      onChangeGroup={setGroup}\n      theme={theme}\n    />\n  )\n}\n\nexport default React.memo(HashrateGraph)\n","import React, { useEffect, useState } from \"react\"\nimport tw from \"twin.macro\"\n\nimport LineGraph from \"./line-graph\"\nimport { useRenderValues } from \"./hooks\"\n\nimport { GROUP_NAMES, DAY } from \"../../common/graph\"\nconst SCALE = 1000000\n\nfunction MinedCoinsGraph({ theme }) {\n  const [data, setData] = useState(null)\n  const [group, setGroup] = useState(DAY)\n  const [loading, setLoading] = useState(true)\n  const groupName = GROUP_NAMES[group]\n\n  const {\n    renderXAxis,\n    renderXValue,\n    renderYAxis,\n    renderYValue,\n  } = useRenderValues({\n    data,\n    group,\n    scale: SCALE,\n    yValueOptions: { suffix: \" XMY\" },\n  })\n\n  useEffect(() => {\n    setLoading(true)\n    fetch(\n      `https://xmy-history.coinid.org/processeddata/minedCoins/${groupName}.json`\n    )\n      .then(r => r.json())\n      .then(difficultyData => {\n        const newData = difficultyData.map((v, i) => {\n          return {\n            x: i,\n            y: v / SCALE,\n          }\n        })\n        setData(newData)\n        setLoading(false)\n      })\n  }, [groupName])\n\n  return (\n    <LineGraph\n      loading={loading}\n      group={group}\n      data={data}\n      startY={0}\n      renderXAxis={renderXAxis}\n      renderYAxis={renderYAxis}\n      renderXValue={renderXValue}\n      renderYValue={renderYValue}\n      barPlotKeys={[\"y\"]}\n      barPlotColors={[\"#0066FF\"]}\n      onChangeGroup={setGroup}\n      theme={theme}\n    />\n  )\n}\n\nexport default React.memo(MinedCoinsGraph)\n","import React, { useEffect, useState } from \"react\"\nimport tw from \"twin.macro\"\n\nimport LineGraph from \"./line-graph\"\nimport { useRenderValues } from \"./hooks\"\n\nimport { GROUP_NAMES, DAY } from \"../../common/graph\"\n\nfunction InflationGraph({ theme }) {\n  const [data, setData] = useState(null)\n  const [group, setGroup] = useState(DAY)\n  const [loading, setLoading] = useState(true)\n  const groupName = GROUP_NAMES[group]\n\n  const {\n    renderXAxis,\n    renderXValue,\n    renderYAxis,\n    renderYValue,\n  } = useRenderValues({\n    data,\n    group,\n    yAxisOptions: { shorten: { precision: 0 }, suffix: \"%\" },\n    yValueOptions: { shorten: { precision: 2 }, suffix: \"%\" },\n  })\n\n  useEffect(() => {\n    setLoading(true)\n    fetch(\n      `https://xmy-history.coinid.org/processeddata/inflation/${groupName}.json`\n    )\n      .then(r => r.json())\n      .then(difficultyData => {\n        const newData = difficultyData.map((v, i) => {\n          return {\n            x: i,\n            y: 100 * v,\n          }\n        })\n        setData(newData)\n        setLoading(false)\n      })\n  }, [groupName])\n\n  return (\n    <LineGraph\n      loading={loading}\n      group={group}\n      data={data}\n      startY={0}\n      renderXAxis={renderXAxis}\n      renderYAxis={renderYAxis}\n      renderXValue={renderXValue}\n      renderYValue={renderYValue}\n      barPlotKeys={[\"y\"]}\n      barPlotColors={[\"#0066FF\"]}\n      onChangeGroup={setGroup}\n      theme={theme}\n    />\n  )\n}\n\nexport default React.memo(InflationGraph)\n","import React, { useState, useRef, useLayoutEffect } from \"react\"\nimport { useTransition, useSpring, animated, interpolate } from \"react-spring\"\nimport tw, { styled } from \"twin.macro\"\nimport * as easings from \"d3-ease\"\n\nimport { PageContainer } from \"../../common/elements\"\nimport usePrevious from \"../../hooks/use-previous\"\nimport { useDimensions } from \"../../hooks/layout\"\n\nconst TabButton = styled.button`\n  ${tw`px-2 py-1 whitespace-no-wrap bg-light-grey transition duration-100 ease-in transform rounded-full text-xxs sm:px-4 sm:py-2 sm:text-xs hover:opacity-75 focus:outline-none`},\n  ${({ thisKey, selectedKey, theme }) =>\n    (thisKey === selectedKey && tw`text-white bg-bubble-blue`) ||\n    (theme === \"graph1\" && tw`bg-light-grey dark:bg-dark-box text-grey`) ||\n    (theme === \"graph2\" &&\n      tw`bg-white dark:bg-dark-graph1-dropdown text-grey`) ||\n    tw`bg-light-grey dark:bg-dark-box text-grey`}\n`\n\nconst BottomTab = ({ items, theme }) => {\n  const [index, setIndex] = useState(0)\n\n  let pageContainerRef = useRef(null)\n  let buttonsContainerRef = useRef(null)\n  const buttonsRef = useRef([].slice(0, items.length))\n\n  const { width } = useDimensions(pageContainerRef)\n\n  const [{ offsetX }, setOffsetX] = useSpring(() => ({\n    offsetX: 0,\n    config: {\n      duration: 400,\n      easing: easings.easeCubicOut,\n    },\n  }))\n\n  useLayoutEffect(() => {\n    let buttonOffsetX = buttonsRef.current[index].offsetLeft || 0\n    let buttonWidth = buttonsRef.current[index].offsetWidth || 0\n\n    let newOffsetX = 0\n    if (width <= 960) {\n      newOffsetX = width / 2 - buttonOffsetX - buttonWidth / 2\n    } else {\n      let containerWidth = buttonsContainerRef.current.offsetWidth\n      let pageContainerWidth = pageContainerRef.current.offsetWidth\n\n      newOffsetX = -buttonOffsetX\n\n      let maxOffsetX = -(containerWidth - pageContainerWidth)\n\n      if (newOffsetX < maxOffsetX) {\n        newOffsetX = maxOffsetX\n      }\n    }\n    setOffsetX({ offsetX: newOffsetX })\n  }, [index, setOffsetX, width])\n\n  const previousSlide = usePrevious(index)\n\n  const dir = index < previousSlide ? -1 : 1\n  const transition = useTransition(index, {\n    initial: { opacity: 1, transform: `translate3d(0, 0, 0)` },\n    from: {\n      opacity: 0,\n      transform: `translate3d(${30 * dir}%, 0, 0)`,\n    },\n    enter: { opacity: 1, transform: `translate3d(0, 0, 0)` },\n    leave: {\n      opacity: 0,\n      position: \"absolute\",\n      transform: `translate3d(${-30 * dir}%, 0, 0)`,\n    },\n    config: {\n      duration: 400,\n      easing: easings.easeCubicOut,\n    },\n  })\n\n  return (\n    <>\n      <PageContainer ref={pageContainerRef}>\n        {transition((props, index) => {\n          return (\n            <animated.div tw=\"inset-0\" style={props}>\n              {items[index].content}\n            </animated.div>\n          )\n        })}\n      </PageContainer>\n      <div tw=\"mt-4\">\n        <PageContainer>\n          <animated.div\n            style={{\n              transform: interpolate([offsetX], offsetX => {\n                return `translate3d(${offsetX}px, 0, 0)`\n              }),\n            }}\n            tw=\"whitespace-no-wrap\"\n            ref={buttonsContainerRef}\n          >\n            {items.map(({ label, color }, keyIndex) => {\n              return (\n                <span\n                  tw=\"px-2\"\n                  key={keyIndex}\n                  ref={el => (buttonsRef.current[keyIndex] = el)}\n                >\n                  <TabButton\n                    theme={theme}\n                    onClick={() => setIndex(keyIndex)}\n                    selectedKey={index}\n                    thisKey={keyIndex}\n                    style={\n                      index === keyIndex ? { backgroundColor: color } : null\n                    }\n                  >\n                    {label}\n                  </TabButton>\n                </span>\n              )\n            })}\n          </animated.div>\n        </PageContainer>\n      </div>\n    </>\n  )\n}\n\nexport default BottomTab\n","import React, { useRef, useEffect } from \"react\"\nimport tw from \"twin.macro\"\nimport { useSpring, animated, config } from \"react-spring\"\nimport { useGesture } from \"react-use-gesture\"\n\nconst mapWidth = 100\nconst mapHeight = 100\n\nconst mapLonLeft = -180\nconst mapLonRight = 180\nconst mapLonDelta = mapLonRight - mapLonLeft\n\nconst mapLatBottom = -85\nconst mapLatBottomDegree = (mapLatBottom * Math.PI) / 180\n\nfunction convertGeoToPixel(lat, lon) {\n  const x = (lon - mapLonLeft) * (mapWidth / mapLonDelta)\n\n  lat = (lat * Math.PI) / 180\n  const worldMapWidth = ((mapWidth / mapLonDelta) * 360) / (2 * Math.PI)\n  const mapOffsetY =\n    (worldMapWidth / 2) *\n    Math.log(\n      (1 + Math.sin(mapLatBottomDegree)) / (1 - Math.sin(mapLatBottomDegree))\n    )\n  const y =\n    mapHeight -\n    ((worldMapWidth / 2) * Math.log((1 + Math.sin(lat)) / (1 - Math.sin(lat))) -\n      mapOffsetY)\n\n  return [x, y]\n}\n\nconst getSize = () => {\n  const sizes = [\n    1.688,\n    1.688,\n    1.688,\n    1.688,\n    1.688,\n    1.688,\n    1.688,\n    1.688,\n    1.688,\n    1.688,\n    1.688,\n    1.688,\n    1.688,\n    2.3,\n    2.3,\n    2.3,\n    2.3,\n    2.3,\n    2.3,\n    2.3,\n    2.3,\n    3.6,\n    3.6,\n    5.4,\n  ]\n\n  return sizes[parseInt(Math.random() * sizes.length, 10)]\n}\n\nconst SeedNode = ({ node, bind }) => {\n  const boxRef = useRef(null)\n\n  const [{ opacity, scale, backgroundColor }, set] = useSpring(() => ({\n    opacity: 0.75,\n    scale: 0,\n    backgroundColor: \"#327CFF\",\n    config: config.wobbly,\n  }))\n\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      set({ scale: 1 })\n    }, 1000 + Math.random() * 5000)\n\n    return () => {\n      clearTimeout(timeout)\n    }\n  }, [set])\n\n  useGesture(\n    {\n      onHover: ({ hovering }) => {\n        if (hovering) {\n          set({ opacity: 0.75, scale: 1.05, backgroundColor: \"#02C093\" })\n        } else {\n          set({ opacity: 0.75, scale: 1, backgroundColor: \"#327CFF\" })\n        }\n      },\n    },\n    {\n      domTarget: boxRef,\n    }\n  )\n\n  const lat = node[10]\n  const lon = node[11]\n\n  const [left, top] = convertGeoToPixel(lat, lon)\n  const size = getSize()\n\n  return (\n    <animated.div\n      tw=\"absolute rounded-full bg-blue-500 top-0 left-0\"\n      style={{\n        width: size + \"%\",\n        height: size + \"%\",\n        left: left + \"%\",\n        top: top + \"%\",\n        opacity,\n        backgroundColor,\n        transform: scale.interpolate(\n          scale => `translate(-50%, -50%) scale(${scale})`\n        ),\n      }}\n      ref={boxRef}\n      {...bind(node)}\n    />\n  )\n}\n\nexport default React.memo(SeedNode)\n","import React from \"react\"\nimport tw from \"twin.macro\"\nimport SeedNode from \"./seed-node\"\n\nconst SeedNodeList = ({ nodes, bind }) => {\n  return nodes.map(node => {\n    return <SeedNode key={`${node[0]}:${node[1]}`} node={node} bind={bind} />\n  })\n}\n\nexport default React.memo(SeedNodeList)\n","import React, { useRef, useState } from \"react\"\nimport tw from \"twin.macro\"\nimport { useGesture } from \"react-use-gesture\"\nimport { useSpring, animated } from \"react-spring\"\n\nimport Image from \"../../image\"\nimport SeedNodeList from \"./seed-node-list\"\n\nconst SeedNodeMap = ({ nodes }) => {\n  const [currentNode, setCurrentNode] = useState([])\n  const [{ opacity, left, top }, set] = useSpring(() => ({\n    opacity: 0,\n    left: 0,\n    top: 0,\n  }))\n  const boxRef = useRef(null)\n\n  const bindDots = useGesture({\n    onHover: ({ hovering, args: [node] }) => {\n      setCurrentNode(node)\n      set({ opacity: hovering ? 1 : 0 })\n    },\n  })\n\n  useGesture(\n    {\n      onMove: ({ event }) => {\n        if (event && event.pageY && event.pageX) {\n          const left = event.pageX - boxRef.current.offsetLeft\n          const top = event.pageY - boxRef.current.offsetTop\n          set({ top, left })\n        }\n      },\n    },\n    {\n      domTarget: boxRef,\n    }\n  )\n\n  const renderNode = () => {\n    const [\n      ip,\n      port,\n      ,\n      version,\n      ,\n      ,\n      ,\n      ,\n      city,\n      country,\n      ,\n      ,\n      location,\n    ] = currentNode\n    return (\n      <>\n        <div>\n          IP address: {ip}:{port}\n        </div>\n        <div>Version: {version}</div>\n        <div>Zone: {location}</div>\n        {city && <div>City: {city}</div>}\n        <div>Country: {country}</div>\n      </>\n    )\n  }\n\n  return (\n    <>\n      <div tw=\"relative\" ref={boxRef}>\n        <animated.div\n          tw=\"absolute p-4 text-black bg-white rounded-14 z-10 pointer-events-none shadow-wide whitespace-no-wrap\"\n          style={{ opacity, left, top, transform: \"translate(-50%, 1rem)\" }}\n        >\n          <svg\n            width=\"13\"\n            height=\"6\"\n            viewBox=\"0 0 13 6\"\n            fill=\"none\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            tw=\"absolute top-0\"\n            style={{ left: \"50%\", transform: \"translate(-50%, -100%)\" }}\n          >\n            <path d=\"M6.5 0L12.1292 6H0.870835L6.5 0Z\" fill=\"white\" />\n          </svg>\n\n          {renderNode()}\n        </animated.div>\n        <Image filename=\"map.dark.png\" alt=\"Map\" tw=\"hidden dark:block\" />\n        <Image filename=\"map.light.png\" alt=\"Map\" tw=\"block dark:hidden\" />\n        <div\n          tw=\"absolute w-full top-0\"\n          style={{\n            top: \"50%\",\n            left: \"50%\",\n            transform: \"translate(-53.2%, -36.5%) scale(1.01)\",\n          }}\n        >\n          <div tw=\"w-full\" style={{ paddingBottom: \"100%\" }} />\n          <SeedNodeList nodes={nodes} bind={bindDots} />\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport default React.memo(SeedNodeMap)\n","import React, { useEffect, useState } from \"react\"\nimport tw, { css } from \"twin.macro\"\nimport { useTranslation } from \"react-i18next\"\n\nimport { MediumBoldText, BodyText, BigText } from \"../../../common/elements\"\nimport SeedNodeMap from \"./seed-node-map\"\n\nimport { gradientTextStyleBlue } from \"../../../common/gradients\"\n\nconst SeedNodeMapSection = () => {\n  const { t } = useTranslation()\n  const [nodes, setNodes] = useState([])\n\n  useEffect(() => {\n    const getData = async () => {\n      const uri = `https://xmy-nodes.coinid.org/latest.json`\n      return await fetch(uri).then(r => r.json())\n    }\n\n    getData().then(setNodes)\n  }, [])\n\n  return (\n    <>\n      <MediumBoldText>{t(\"analytics.map.title\")}</MediumBoldText>\n      <div tw=\"md:flex md:flex-row mb-14\">\n        <BodyText tw=\"mr-10 mb-10\">{t(\"analytics.map.description\")}</BodyText>\n        <div tw=\"h-24 px-3 sm:h-32 sm:px-6 inline-flex flex-col flex-shrink-0 flex-grow-0 bg-white dark:bg-dark-bg rounded shadow-wide items-center justify-center text-center\">\n          <BigText css={gradientTextStyleBlue}>\n            {t(\"formattedNumber\", { number: nodes.length })}\n          </BigText>\n          <div tw=\"pb-2\">Open nodes</div>\n        </div>\n      </div>\n      <SeedNodeMap nodes={nodes} />\n    </>\n  )\n}\n\nexport default React.memo(SeedNodeMapSection)\n","import React from \"react\"\nimport tw from \"twin.macro\"\nimport { useTranslation } from \"react-i18next\"\n\nimport SEO from \"../components/seo\"\nimport Cover from \"../components/shared/cover\"\n\nimport BlocksMinedGraph from \"../components/graphs/blocks-mined-graph\"\nimport TransactionsGraph from \"../components/graphs/transactions-graph\"\nimport DifficultyGraph from \"../components/graphs/difficulty-graph\"\nimport HashrateGraph from \"../components/graphs/hashrate-graph\"\nimport MinedCoinsGraph from \"../components/graphs/mined-coins-graph\"\nimport InflationGraph from \"../components/graphs/inflation-graph\"\nimport BottomTab from \"../components/shared/bottom-tab\"\n\nimport SeedNodeMapSection from \"../components/pages/analytics/seed-node-map-section\"\n\nimport {\n  algoNames,\n  algoColors,\n  algoDiffScale,\n  hashrateScale,\n} from \"../common/graph\"\n\nimport {\n  PageContainer,\n  BodyText,\n  MediumBoldText,\n  GraphContainer,\n} from \"../common/elements\"\n\nconst AnalyticsPage = () => {\n  const { t } = useTranslation()\n\n  return (\n    <>\n      <SEO title={t(\"analytics.title\")} />\n      <PageContainer>\n        <Cover showArrow>{t(\"analytics.title\")}</Cover>\n      </PageContainer>\n      <div tw=\"bg-light-grey dark:bg-dark-light-bg py-14 sm:py-30 overflow-hidden\">\n        <PageContainer tw=\"px-6\">\n          <SeedNodeMapSection />\n        </PageContainer>\n      </div>\n      <div tw=\"py-14 sm:py-30 overflow-hidden\">\n        <PageContainer tw=\"px-6\">\n          <MediumBoldText tw=\"mb-10\">\n            {t(\"analytics.blocks_mined.title\")}\n          </MediumBoldText>\n          <BodyText tw=\"mb-14\">\n            {t(\"analytics.blocks_mined.description\")}\n          </BodyText>\n\n          <GraphContainer theme=\"graph1\">\n            <BlocksMinedGraph theme=\"graph1\" />\n          </GraphContainer>\n        </PageContainer>\n      </div>\n      <div tw=\"bg-light-grey dark:bg-dark-light-bg py-14 sm:py-30 overflow-hidden\">\n        <PageContainer tw=\"px-6\">\n          <MediumBoldText tw=\"mb-10\">\n            {t(\"analytics.mining_difficulty.title\")}\n          </MediumBoldText>\n          <BodyText tw=\"mb-14\">\n            {t(\"analytics.mining_difficulty.description\")}\n          </BodyText>\n          <BottomTab\n            theme=\"graph2\"\n            items={algoNames.map((a, i) => ({\n              label: a,\n              color: algoColors[i],\n              content: (\n                <GraphContainer theme=\"graph2\">\n                  <DifficultyGraph\n                    algo={i}\n                    scale={algoDiffScale[i]}\n                    theme=\"graph2\"\n                  />\n                </GraphContainer>\n              ),\n            }))}\n          />\n        </PageContainer>\n      </div>\n      <div tw=\"py-14 sm:py-30 overflow-hidden\">\n        <PageContainer tw=\"px-6\">\n          <MediumBoldText tw=\"mb-10\">\n            {t(\"analytics.hash_rate.title\")}\n          </MediumBoldText>\n          <BodyText tw=\"mb-14\">{t(\"analytics.hash_rate.description\")}</BodyText>\n\n          <BottomTab\n            theme=\"graph1\"\n            items={algoNames.map((a, i) => ({\n              label: a,\n              color: algoColors[i],\n              content: (\n                <GraphContainer theme=\"graph1\">\n                  <HashrateGraph\n                    algo={i}\n                    scale={hashrateScale[i]}\n                    theme=\"graph1\"\n                  />\n                </GraphContainer>\n              ),\n            }))}\n          />\n        </PageContainer>\n      </div>\n      <div tw=\"bg-light-grey dark:bg-dark-light-bg py-14 sm:py-30 overflow-hidden\">\n        <PageContainer tw=\"px-6\">\n          <MediumBoldText tw=\"mb-10\">\n            {t(\"analytics.transactions.title\")}\n          </MediumBoldText>\n          <BodyText tw=\"mb-14\">\n            {t(\"analytics.transactions.description\")}\n          </BodyText>\n\n          <GraphContainer theme=\"graph2\">\n            <TransactionsGraph theme=\"graph2\" />\n          </GraphContainer>\n        </PageContainer>\n      </div>\n      <div tw=\"py-14 sm:py-30 overflow-hidden\">\n        <PageContainer tw=\"px-6\">\n          <MediumBoldText tw=\"mb-10\">\n            {t(\"analytics.mined_coins.title\")}\n          </MediumBoldText>\n          <BodyText tw=\"mb-14\">\n            {t(\"analytics.mined_coins.description\")}\n          </BodyText>\n\n          <GraphContainer theme=\"graph1\">\n            <MinedCoinsGraph theme=\"graph1\" />\n          </GraphContainer>\n        </PageContainer>\n      </div>\n      <div tw=\"bg-light-grey dark:bg-dark-light-bg py-14 sm:py-30 overflow-hidden\">\n        <PageContainer tw=\"px-6\">\n          <MediumBoldText tw=\"mb-10\">\n            {t(\"analytics.inflation.title\")}\n          </MediumBoldText>\n          <BodyText tw=\"mb-14\">{t(\"analytics.inflation.description\")}</BodyText>\n\n          <GraphContainer theme=\"graph2\">\n            <InflationGraph theme=\"graph2\" />\n          </GraphContainer>\n        </PageContainer>\n      </div>\n    </>\n  )\n}\n\nexport default AnalyticsPage\n","export function cubicIn(t) {\n  return t * t * t;\n}\nexport function cubicOut(t) {\n  return --t * t * t + 1;\n}\nexport function cubicInOut(t) {\n  return ((t *= 2) <= 1 ? t * t * t : (t -= 2) * t * t + 2) / 2;\n}","import React from \"react\"\nimport { StaticQuery, graphql } from \"gatsby\"\nimport Img from \"gatsby-image\"\nimport tw from \"twin.macro\"\n\nconst Image = ({ filename, className, alt }) => (\n  <StaticQuery\n    query={graphql`\n      query {\n        images: allFile {\n          edges {\n            node {\n              relativePath\n              name\n              childImageSharp {\n                sizes(maxWidth: 1600) {\n                  ...GatsbyImageSharpSizes\n                }\n              }\n            }\n          }\n        }\n      }\n    `}\n    render={data => {\n      const image = data.images.edges.find(n =>\n        n.node.relativePath.includes(filename)\n      )\n      if (!image) {\n        return null\n      }\n\n      const imageSizes = image.node.childImageSharp.sizes\n      return (\n        <Img\n          alt={alt}\n          fluid={imageSizes}\n          tw=\"relative w-full max-w-full max-h-full\"\n          className={className}\n        />\n      )\n    }}\n  />\n)\n\nexport default Image\n"],"sourceRoot":""}